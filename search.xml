<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ciphey——基于深度网络的(文本)自动解密工具安装及使用</title>
    <url>/2021/05/29/ciphey/</url>
    <content><![CDATA[<p>该能够自动化的进行解码，可以在短时间破解几十种常见的密码形式。</p>
<h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get <span class="built_in">clone</span> https://github.com/Ciphey/Ciphey</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U ciphey</span><br></pre></td></tr></table></figure>

<p>然后发现了如下错误：</p>
<p>ERROR: Cannot uninstall ‘PyYAML’. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ciphey --ignore-installed PyYAML</span><br></pre></td></tr></table></figure>

<p>之后又有如下错误：</p>
<p><img src="/2021/05/29/ciphey/2.png" alt="ciphey"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure>

<p>最后还是有存在以下问题，不知道怎么解决，但工具已经可以正常使用</p>
<p><img src="/2021/05/29/ciphey/1.png" alt="ciphey"></p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ciphey -t <span class="string">&quot;iZr2JfFrKxO35rjrpjStcbgiTak&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/29/ciphey/3.png" alt="ciphey"></p>
<p>可以看出这串字符用了base64 base85 base58 reverse atbash进行了加密。</p>
<p>Ciphey 除了对这种加密字符串的解密，还可以针对整个文本。</p>
<p>可以使用如下命令，解密 encrypted.txt 文本里所有的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ciphey - encrypted.txt</span><br></pre></td></tr></table></figure>

<p>肥肠滴方便。 </p>
]]></content>
      <categories>
        <category>CRYPTO</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2021/09/26/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line"></span><br><span class="line">hexo s #启动本地服务，进行文章预览调试</span><br></pre></td></tr></table></figure>

<p>常用</p>
<p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本</p>
<p>复合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy -g  #生成加部署</span><br><span class="line">hexo server -g  #生成加预览</span><br></pre></td></tr></table></figure>

<p>命令简写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机实验6.5</title>
    <url>/2021/05/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E9%AA%8C6-5/</url>
    <content><![CDATA[<h1 id="①-P1-0，-10HZ方波"><a href="#①-P1-0，-10HZ方波" class="headerlink" title="① P1.0，  10HZ方波"></a>① P1.0，  10HZ方波</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORG 0000H</span><br><span class="line">AJMP MAIN</span><br><span class="line">ORG 000BH</span><br><span class="line">AJMP T0</span><br><span class="line">ORG 0100H</span><br><span class="line">MAIN:</span><br><span class="line">MOV TMOD,#01</span><br><span class="line">MOV TH0,#3CH</span><br><span class="line">MOV TL0,#0B0H</span><br><span class="line">SETB ET0</span><br><span class="line">SETB TR0</span><br><span class="line">SETB EA</span><br><span class="line">SJMP $</span><br><span class="line">T0:</span><br><span class="line">MOV TH0,#3CH</span><br><span class="line">MOV TL0,#0B0H</span><br><span class="line">CPL P1.0</span><br><span class="line">RETI</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<h1 id="②P1-0，-周期100ms，-占空比40"><a href="#②P1-0，-周期100ms，-占空比40" class="headerlink" title="②P1.0，  周期100ms，   占空比40%"></a>②P1.0，  周期100ms，   占空比40%</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RG 0000H</span><br><span class="line">AJMP MAIN</span><br><span class="line">ORG 000BH</span><br><span class="line">AJMP T0</span><br><span class="line">ORG 0100H</span><br><span class="line">MAIN:</span><br><span class="line">MOV SP,#60H</span><br><span class="line">MOV TMOD,#01</span><br><span class="line">SETB P1.0</span><br><span class="line">MOV TH0,#63H</span><br><span class="line">MOV TL0,#0C0H</span><br><span class="line">SETB ET0</span><br><span class="line">SETB TR0</span><br><span class="line">SETB EA</span><br><span class="line">CLR P1.0</span><br><span class="line">MOV R0,#0</span><br><span class="line">SJMP $  </span><br><span class="line">T0:</span><br><span class="line">INC R0</span><br><span class="line">CJNE R0,#1,HIGH</span><br><span class="line">MOV TH0,#15H</span><br><span class="line">MOV TL0,#0A0H</span><br><span class="line">SETB P1.0</span><br><span class="line">MOV R0,#0</span><br><span class="line">JMP EXIT</span><br><span class="line">HIGH:</span><br><span class="line">INC R0</span><br><span class="line">MOV TH0,#63H</span><br><span class="line">MOV TL0,#0C0H</span><br><span class="line">CLR P1.0</span><br><span class="line">EXIT:</span><br><span class="line">RETI</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机实验</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法</title>
    <url>/2021/05/29/%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    <content><![CDATA[<h1 id="7-20-全排列"><a href="#7-20-全排列" class="headerlink" title="7-20 全排列"></a><strong>7-20 全排列</strong></h1><p>对于1~n这n个不同的数，按照一定的顺序把这n个数排列起来（每个数出现一次，且不重复, n&lt;10），将所有的排列列出，称为全排列。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>一个数n。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>1~n的全排列，每个排列一行（按字典序输出）。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 </span><br><span class="line">1 3 2 </span><br><span class="line">2 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">3 1 2 </span><br><span class="line">3 2 1 </span><br></pre></td></tr></table></figure>

<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">100</span>],vis[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t==n+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			cout&lt;&lt;x[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			x[t]=i;</span><br><span class="line">			vis[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(t+<span class="number">1</span>);</span><br><span class="line">			vis[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="7-21-n-queens"><a href="#7-21-n-queens" class="headerlink" title="7-21 n queens"></a><strong>7-21 n queens</strong></h1><p>有一个有n行n列的棋盘，你需要在棋盘上放置n个皇后，同一行没有两个皇后（包括对角线）。</p>
<h3 id="输入规格："><a href="#输入规格：" class="headerlink" title="输入规格："></a>输入规格：</h3><p>输入一个整数 n 表示 n 个皇后。</p>
<h3 id="输出规格："><a href="#输出规格：" class="headerlink" title="输出规格："></a>输出规格：</h3><p>将一个解决方案放在一行中（例如，在 4 个皇后中，一个解决方案是 2 4 1 3，这意味着第一行皇后将放在第 2 列，第 2 行皇后将放在第 4 列，并且依此类推），然后在最后一行输出总解决方案编号。</p>
<h3 id="输入示例："><a href="#输入示例：" class="headerlink" title="输入示例："></a>输入示例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="输出示例："><a href="#输出示例：" class="headerlink" title="输出示例："></a>输出示例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 4 1 3 </span><br><span class="line">3 1 4 2 </span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">100</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;t;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x[i]==x[t])||(t-x[t]==i-x[i])||(t+x[t]==i+x[i]))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t==n+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			cout&lt;&lt;x[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		cnt++;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		x[t]=i;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(t))&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(t+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;cnt;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="7-22-逆序数"><a href="#7-22-逆序数" class="headerlink" title="7-22 逆序数"></a><strong>7-22 逆序数</strong></h1><p>设x1,x2,x3…,xn是集合{1，2，3，…，n}的一个排列，排列中逆序对的对数称为逆序数，（如1432的逆序数为3，即有3对逆序对，分别为：43，42，32）。则当x3=4时（即第3个数为4），所有排列的逆序数的和为多少？（n=6时，为2020年全国高中数学联赛浙江赛区初赛试题填空第10题）</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入一个n(n&lt;10)。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出逆序数的和。</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">912</span><br></pre></td></tr></table></figure>

<h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">100</span>],vis[<span class="number">100</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t==n+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x[<span class="number">3</span>]==<span class="number">4</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">					<span class="keyword">if</span>(x[j]&gt;x[k])</span><br><span class="line">						cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		x[t]=i;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			vis[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(t+<span class="number">1</span>);</span><br><span class="line">			vis[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;cnt;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="7-23-整数拆分"><a href="#7-23-整数拆分" class="headerlink" title="7-23 整数拆分"></a><strong>7-23 整数拆分</strong></h1><p>一个正整数n拆分成若干个正整数的和（至少两个数,n&lt;=100）。</p>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>一个正整数n</p>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>若干行，每行一个等式（数与数之间要求非降序排列）。最后一行给出解的总个数</p>
<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4=1+1+1+1</span><br><span class="line">4=1+1+2</span><br><span class="line">4=1+3</span><br><span class="line">4=2+2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>最后一行的4表示总共有4个解。</p>
<h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,x[<span class="number">1000</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;n&lt;&lt;<span class="string">&quot;=&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;t<span class="number">-1</span>;i++)&#123;</span><br><span class="line">			cout&lt;&lt;x[i]&lt;&lt;<span class="string">&quot;+&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;x[t<span class="number">-1</span>];</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=x[t<span class="number">-1</span>];k&lt;=s;k++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(k&lt;n)&#123;</span><br><span class="line">			x[t]=k;</span><br><span class="line">			             <span class="comment">//s=s-k;</span></span><br><span class="line">			<span class="built_in">dfs</span>(s-k,t+<span class="number">1</span>);<span class="comment">//dfs(s,t-1)  //判断下一个数是否符合</span></span><br><span class="line">			             <span class="comment">//s=s+k;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">////这里回溯的隐含的，s==0，则不进入循环；同时回溯到循环内，k++，继续循环</span></span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	x[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(n,<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;cnt;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>批量提取文件中内容</title>
    <url>/2021/06/13/%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6%E4%B8%AD%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h4 id="顺序提取："><a href="#顺序提取：" class="headerlink" title="顺序提取："></a>顺序提取：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;/root/桌面/ISO1995/&quot;</span> <span class="comment">#文件夹目录</span></span><br><span class="line">files= os.listdir(path) <span class="comment">#得到文件夹下的所有文件名称</span></span><br><span class="line">files.sort()           <span class="comment">#排序</span></span><br><span class="line"></span><br><span class="line">txts = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files: <span class="comment">#遍历文件夹</span></span><br><span class="line"></span><br><span class="line">	position = path+ file  </span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span> (position)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(position, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#打开文件</span></span><br><span class="line"></span><br><span class="line">		data = f.read() <span class="comment">#读取文件</span></span><br><span class="line"></span><br><span class="line">		txts.append(data)</span><br><span class="line"></span><br><span class="line">txts = <span class="string">&#x27;&#x27;</span>.join(txts)<span class="comment">#转化为非数组类型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;f2.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f2:   <span class="comment">#存放到指定文件中</span></span><br><span class="line">        f2.write(txts)</span><br><span class="line"><span class="built_in">print</span> (txts)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="批量提取word内容到txt："><a href="#批量提取word内容到txt：" class="headerlink" title="批量提取word内容到txt："></a>批量提取word内容到txt：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">path = <span class="string">&quot;/root/桌面/22/&quot;</span> <span class="comment">#文件夹目录</span></span><br><span class="line">files= os.listdir(path) <span class="comment">#得到文件夹下的所有文件名称</span></span><br><span class="line"></span><br><span class="line">file_dir = <span class="string">&#x27;./docx&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">contents_list = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    file_name = path+ file</span><br><span class="line">    <span class="built_in">print</span> (file_name)</span><br><span class="line">    file_content_list = []</span><br><span class="line">    file_content = docx.Document(file_name)</span><br><span class="line">    <span class="keyword">for</span> para <span class="keyword">in</span> file_content.paragraphs:</span><br><span class="line">        file_content_list.append(para.text)</span><br><span class="line">    contents_list.append(<span class="string">&#x27; &#x27;</span>.join(file_content_list))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;f2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> str_line <span class="keyword">in</span> contents_list:</span><br><span class="line">        f.write(str_line + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络(第7版)谢希仁PPT</title>
    <url>/2021/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CPPT/</url>
    <content><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/1fEARC3Av3Z43IO3Jkwoz4g">https://pan.baidu.com/s/1fEARC3Av3Z43IO3Jkwoz4g</a> </p>
<p>提取码：iwyc </p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2021/05/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="7-17-部分背包"><a href="#7-17-部分背包" class="headerlink" title="7-17 部分背包"></a><strong>7-17 部分背包</strong></h1><p>给定 N 种物品和一个背包。物品 i 的重量是 W i ，价值为 V i ；背包的容量为 V。问应如何选择装入背包中的物品，使得装入背包中物品的总价值最大？在选择装入背包的物品，对每种物品可以选择：全部装入或装入部分，且不能重复装入。输入数据的第一行分别为：背包的容量 V，物品的个数 N。接下来的 N 行表示 N 个物品的重量和价值。输出为最大的总价值。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>第一行连个整数，分别是V和N(&lt;=1000) 接下来N行，每行分别为 W i 和 V i</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出为最大的总价值（保留两位小数）</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15 4</span><br><span class="line">3 5</span><br><span class="line">4 6</span><br><span class="line">5 7</span><br><span class="line">7 12</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">24.40</span><br></pre></td></tr></table></figure>

<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> v,n;</span><br><span class="line">	<span class="keyword">double</span> maxx=<span class="number">0.0</span>;</span><br><span class="line">	cin&gt;&gt;v&gt;&gt;n;</span><br><span class="line">	<span class="keyword">double</span> shangpin[n][<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;shangpin[i][<span class="number">0</span>]&gt;&gt;shangpin[i][<span class="number">1</span>];</span><br><span class="line">		shangpin[i][<span class="number">2</span>]=shangpin[i][<span class="number">1</span>]/shangpin[i][<span class="number">0</span>];</span><br><span class="line">		<span class="comment">//cout&lt;&lt;shangpin[i][2];</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> max=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(shangpin[j][<span class="number">2</span>]&gt;shangpin[max][<span class="number">2</span>])&#123;</span><br><span class="line">				max=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">				<span class="keyword">double</span> temp0,temp1,temp2;</span><br><span class="line">				temp0=shangpin[i][<span class="number">0</span>];</span><br><span class="line">				temp1=shangpin[i][<span class="number">1</span>];</span><br><span class="line">				temp2=shangpin[i][<span class="number">2</span>];</span><br><span class="line">				shangpin[i][<span class="number">0</span>]=shangpin[max][<span class="number">0</span>];</span><br><span class="line">				shangpin[i][<span class="number">1</span>]=shangpin[max][<span class="number">1</span>];</span><br><span class="line">				shangpin[i][<span class="number">2</span>]=shangpin[max][<span class="number">2</span>];</span><br><span class="line">				shangpin[max][<span class="number">0</span>]=temp0;</span><br><span class="line">				shangpin[max][<span class="number">1</span>]=temp1;</span><br><span class="line">				shangpin[max][<span class="number">2</span>]=temp2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(shangpin[i][<span class="number">0</span>]&lt;v)&#123;</span><br><span class="line">			maxx+=shangpin[i][<span class="number">1</span>];</span><br><span class="line">			v-=shangpin[i][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			maxx+=shangpin[i][<span class="number">2</span>]*v;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,maxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-18-活动安排（贪心算法）"><a href="#7-18-活动安排（贪心算法）" class="headerlink" title="7-18 活动安排（贪心算法）"></a><strong>7-18 活动安排（贪心算法）</strong></h1><p>学校在最近几天有n个活动，这些活动都需要使用学校的大礼堂，在同一时间，礼堂只能被一个活动使用。由于有些活动时间上有冲突，学校办公室人员只好让一些活动放弃使用礼堂而使用其他教室。</p>
<p>现在给出n个活动使用礼堂的起始时间<em>b<strong>e</strong>g<strong>i</strong>n**i</em>和结束时间<em>e<strong>n</strong>d**i</em>(<em>b<strong>e</strong>g<strong>i</strong>n**i</em>&lt;<em>e<strong>n</strong>d**i</em>)，请你帮助办公室人员安排一些活动来使用礼堂，要求安排的活动尽量多。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>第一行一个整数n(n≤1000)；</p>
<p>接下来的n行，每行两个整数，第一个<em>b<strong>e</strong>g<strong>i</strong>n**i</em>，第二个是<em>e<strong>n</strong>d**i</em>(<em>b<strong>e</strong>g<strong>i</strong>n**i</em>&lt;<em>e<strong>n</strong>d**i</em>≤32767)。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出最多能安排的活动个数。</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">12 18</span><br><span class="line">5 11</span><br><span class="line">5 30</span><br><span class="line">15 23</span><br><span class="line">2 28</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hd</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> start;</span><br><span class="line">	<span class="keyword">int</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	hd a[n];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a[i].start&gt;&gt;a[i].end;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">		<span class="keyword">int</span> min=j;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[min].end&gt;a[k].end)&#123;</span><br><span class="line">				min=k;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		hd temp;</span><br><span class="line">		temp=a[j];</span><br><span class="line">		a[j]=a[min];</span><br><span class="line">		a[min]=temp;</span><br><span class="line">	&#125; </span><br><span class="line"><span class="comment">//	for(int j=0;j&lt;n;j++)&#123;</span></span><br><span class="line"><span class="comment">//		cout&lt;&lt;a[j].end&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//	&#125; </span></span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[j].start&gt;now)&#123;</span><br><span class="line">			now=a[j].end;</span><br><span class="line">			num++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; </span><br><span class="line">	cout&lt;&lt;num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-19-过河问题"><a href="#7-19-过河问题" class="headerlink" title="7-19 过河问题"></a><strong>7-19 过河问题</strong></h1><p>一个月黑风高的夜晚，几个人在河的右岸，他们要到河的左岸去。由于只有一把手电筒，因此必须每次过两人回一人，速度由慢者决定，问过河所需最短时间。</p>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入t组数据，每组数据第1行输入n（&lt;=1000），第2行输入n个数，表示每个人过河的时间(&lt;1000的正数)。</p>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出t行数据，每行1个数，表示每组过河最少时间。</p>
<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2 5 10</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure>

<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP:"></a>EXP:</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			cin&gt;&gt;a[i];</span><br><span class="line">		<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(n&gt;<span class="number">3</span>)&#123;</span><br><span class="line">			sum+=<span class="built_in">min</span>(<span class="number">2</span>*a[<span class="number">2</span>]+a[<span class="number">1</span>]+a[n],a[n<span class="number">-1</span>]+a[<span class="number">1</span>]*<span class="number">2</span>+a[n]);</span><br><span class="line">			n-=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) sum+=a[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">2</span>) sum+=a[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">3</span>) sum+=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>];</span><br><span class="line">		cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>buuctf re</title>
    <url>/2021/09/26/buuctf-re/</url>
    <content><![CDATA[<h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input the flag ��&quot;</span>);</span><br><span class="line">    String str = s.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;Your input is ��&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">    Encrypt(stringArr);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">char</span>[] arr)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> result = arr[i] + <span class="string">&#x27;@&#x27;</span> ^ <span class="number">0x20</span>;</span><br><span class="line">      Resultlist.add(Integer.valueOf(result));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] KEY = &#123; <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span> &#125;;</span><br><span class="line">    ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; KEY.length; j++) &#123;</span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Congratulations��&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.err.println(<span class="string">&quot;Error��&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp:"></a>Exp:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">KEY = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(KEY)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(KEY[i]-<span class="built_in">ord</span>(<span class="string">&#x27;@&#x27;</span>)^<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h2 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h2><p><img src="/2021/09/26/buuctf-re/buuctf-re.png" alt="png"></p>
<h5 id="将这组十六进制数转为字符："><a href="#将这组十六进制数转为字符：" class="headerlink" title="将这组十六进制数转为字符："></a>将这组十六进制数转为字符：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k1=[<span class="number">0x70</span>,<span class="number">0x76</span>,<span class="number">0x6b</span>,<span class="number">0x71</span>,<span class="number">0x7b</span>,<span class="number">0x6d</span>,<span class="number">0x31</span>,<span class="number">0x36</span>,<span class="number">0x34</span>,<span class="number">0x36</span>,<span class="number">0x37</span>,<span class="number">0x35</span>,<span class="number">0x32</span>,<span class="number">0x36</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x6c</span>,<span class="number">0x34</span>,<span class="number">0x6d</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x6c</span>,<span class="number">0x6e</span>,<span class="number">0x70</span>,<span class="number">0x37</span>,<span class="number">0x70</span>,<span class="number">0x39</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x6b</span>,<span class="number">0x32</span>,<span class="number">0x38</span>,<span class="number">0x6b</span>,<span class="number">0x37</span>,<span class="number">0x35</span>,<span class="number">0x7d</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(k1)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(k1[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C1.png" alt="1"></p>
<p>凯撒密码得flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h2><p>用jadx-gui打开</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">               String xx = editview.getText().toString();</span><br><span class="line">               <span class="keyword">if</span> (!(xx.length() == <span class="number">32</span> &amp;&amp; xx.charAt(<span class="number">31</span>) == <span class="string">&#x27;a&#x27;</span> &amp;&amp; xx.charAt(<span class="number">1</span>) == <span class="string">&#x27;b&#x27;</span> &amp;&amp; (xx.charAt(<span class="number">0</span>) + xx.charAt(<span class="number">2</span>)) - <span class="number">48</span> == <span class="number">56</span>)) &#123;</span><br><span class="line">                   flag = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="keyword">char</span>[] x = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();</span><br><span class="line">                   x[<span class="number">2</span>] = (<span class="keyword">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">3</span>]) - <span class="number">50</span>);</span><br><span class="line">                   x[<span class="number">4</span>] = (<span class="keyword">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">5</span>]) - <span class="number">48</span>);</span><br><span class="line">                   x[<span class="number">30</span>] = (<span class="keyword">char</span>) ((x[<span class="number">31</span>] + x[<span class="number">9</span>]) - <span class="number">48</span>);</span><br><span class="line">                   x[<span class="number">14</span>] = (<span class="keyword">char</span>) ((x[<span class="number">27</span>] + x[<span class="number">28</span>]) - <span class="number">97</span>);</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">                       <span class="keyword">char</span> a = x[<span class="number">31</span> - i];</span><br><span class="line">                       x[<span class="number">31</span> - i] = x[i];</span><br><span class="line">                       x[i] = a;</span><br><span class="line">                   &#125;</span><br><span class="line">                   textview.setText(<span class="string">&quot;flag&#123;&quot;</span> + String.valueOf(x) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               textview.setText(<span class="string">&quot;输入注册码错误&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Exp："><a href="#Exp：" class="headerlink" title="Exp："></a>Exp：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">flagtrue = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> flagtrue]</span><br><span class="line">x[<span class="number">2</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">2</span>]) + <span class="built_in">ord</span>(x[<span class="number">3</span>]) - <span class="number">0x32</span>)</span><br><span class="line">x[<span class="number">4</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">2</span>]) + <span class="built_in">ord</span>(x[<span class="number">5</span>]) - <span class="number">0x30</span>)</span><br><span class="line">x[<span class="number">0x1e</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">0x1f</span>]) + <span class="built_in">ord</span>(x[<span class="number">0x9</span>]) - <span class="number">0x30</span>)</span><br><span class="line">x[<span class="number">0xe</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">0x1b</span>]) + <span class="built_in">ord</span>(x[<span class="number">0x1c</span>]) - <span class="number">0x61</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    x[i],x[<span class="number">31</span>-i] = x[<span class="number">31</span>-i],x[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;flag&#123;&quot;</span>+ <span class="string">&#x27;&#x27;</span>.join(x) + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="flag"><a href="#flag" class="headerlink" title="flag:"></a>flag:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>拿到个exe文件，二话不说直接丢进ida</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DWORD v0; <span class="comment">// eax</span></span><br><span class="line">  DWORD v1; <span class="comment">// eax</span></span><br><span class="line">  CHAR String; <span class="comment">// [esp+4Ch] [ebp-310h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+150h] [ebp-20Ch]</span></span><br><span class="line">  CHAR String1; <span class="comment">// [esp+154h] [ebp-208h]</span></span><br><span class="line">  BYTE pbData; <span class="comment">// [esp+258h] [ebp-104h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;pbData, <span class="number">0</span>, <span class="number">0x104</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;String1, <span class="number">0</span>, <span class="number">0x104</span>u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(1): &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;pbData);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;pbData) != <span class="number">6</span> )     <span class="comment">// flag的长度为6</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;pbData);             <span class="comment">// 感觉是转换v4的，具体没细看（感觉不太重要）</span></span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">100000</span> )                            <span class="comment">// v4小于100000就退出</span></span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">strcat</span>((<span class="keyword">char</span> *)&amp;pbData, <span class="string">&quot;@DBApp&quot;</span>);            <span class="comment">// 将@DBApp与pbData连接</span></span><br><span class="line">  v0 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;pbData);           <span class="comment">// v0 == 12</span></span><br><span class="line">  sub_40100A(&amp;pbData, v0, &amp;String1);            <span class="comment">//连接之后pbData经过处理和下面的字符串进行比较才会继续，进入该函数查看是用何种方式进行加密，可以把前面的6位数爆破出来</span></span><br><span class="line">  <span class="keyword">if</span> ( !_strcmpi(&amp;String1, <span class="string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>) )  </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;continue...\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(2): &quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;String, <span class="number">0</span>, <span class="number">0x104</span>u);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;String);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;String) != <span class="number">6</span> )                 <span class="comment">// string == 6</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">      ExitProcess(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(&amp;String, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;pbData);     <span class="comment">// string == 18</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;String1, <span class="number">0</span>, <span class="number">0x104</span>u);</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(&amp;String);                       <span class="comment">// v1 == 18</span></span><br><span class="line">    sub_401019((BYTE *)&amp;String, v1, &amp;String1);</span><br><span class="line">    <span class="keyword">if</span> ( !_strcmpi(<span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span>, &amp;String1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !sub_40100F(&amp;String) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!!\n&quot;</span>);</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;bye ~~\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>进sub_40100A</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C2.png" alt="2"></p>
<p>最关键的还是这个函数</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C3.png" alt="3"></p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C4.png" alt="4"></p>
<p>函数中第二个为ALG_ID=0x8004u,在<a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id%E4%B8%AD%E6%9F%A5%E8%AF%A2%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AFSHA1%E5%8A%A0%E5%AF%86">https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id中查询，发现是SHA1加密</a></p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C5.png" alt="5"></p>
<h4 id="写脚本爆破出password（1）的值："><a href="#写脚本爆破出password（1）的值：" class="headerlink" title="写脚本爆破出password（1）的值："></a>写脚本爆破出password（1）的值：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">partflag = <span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">999999</span>):</span><br><span class="line">  flag = <span class="built_in">str</span>(i) + partflag</span><br><span class="line">  flaghex = hashlib.sha1(flag.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  flaghex = flaghex.hexdigest()</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == flaghex:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123321@DBApp</span><br></pre></td></tr></table></figure>

<p>同理进入sub_401019</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C6.png" alt="6"></p>
<p>查询ALG_ID=0x8003u，MD5加密</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C7.png" alt="7"></p>
<p>最简单的方法就是用网站解密工具<a href="https://www.somd5.com/">https://www.somd5.com/</a></p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C8.png"></p>
<p>接下来还是按正常方式解，进入该函数</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C9.png"></p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C10.png"></p>
<p>​    再进入sub_401005看看，就是将我们从AAA取出的值和第二次密码连接后的字符串进行异或</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C11.png"></p>
<p>用ResourceHacker查看文件中的资源</p>
<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C12.png"></p>
<p>因为要生成一个.rtf的文件，而每个RTF文件都是一个文本文件，显示时由RTF阅读器格式化。文件开始处是{/rtf，它作为RTF文件的标志是必不可少的。随意看个rtf的文件头，{/rtf1/ansi/ansicpg936/deff0/deflang1033/deflangfe2052<br>所以取前六位，{\rtf1直接与AAA中前六个数据异或(05 7D 41 15 26 01 )。</p>
<h4 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;&#123;\rtf1&quot;</span></span><br><span class="line">a = [<span class="number">0x05</span>,<span class="number">0x7D</span>,<span class="number">0x41</span>,<span class="number">0x15</span>,<span class="number">0x26</span>,<span class="number">0x01</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">	x = <span class="built_in">ord</span>(s[i]) ^ a[i]</span><br><span class="line">	flag += <span class="built_in">chr</span>(x)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~!3a@0</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/26/buuctf-re/buuctf-re%5C13.png"></p>
<p>最后在本地查找dbapp.rtf文件,得到flag：flag{N0_M0re_Free_Bugs}</p>
]]></content>
      <tags>
        <tag>REVERSE</tag>
      </tags>
  </entry>
</search>
